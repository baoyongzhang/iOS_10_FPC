{ Parsed from AVFoundation.framework AVPlayerItemOutput.h }

{ Types from AVPlayerItemOutput }
{$ifdef TYPES}

{$endif}


{$ifdef TYPES}
type
  AVPlayerItemOutputPtr = ^AVPlayerItemOutput;
  AVPlayerItemVideoOutputPtr = ^AVPlayerItemVideoOutput;
  AVPlayerItemLegibleOutputPtr = ^AVPlayerItemLegibleOutput;
  AVPlayerItemMetadataOutputPtr = ^AVPlayerItemMetadataOutput;
  AVPlayerItemOutputPullDelegateProtocolPtr = ^AVPlayerItemOutputPullDelegateProtocol;
  AVPlayerItemLegibleOutputPushDelegateProtocolPtr = ^AVPlayerItemLegibleOutputPushDelegateProtocol;
  AVPlayerItemOutputPushDelegateProtocolPtr = ^AVPlayerItemOutputPushDelegateProtocol;
  AVPlayerItemMetadataOutputPushDelegateProtocolPtr = ^AVPlayerItemMetadataOutputPushDelegateProtocol;
{$endif}

{$ifdef CLASSES}

type
  AVPlayerItemOutput = objcclass external (NSObject)
  private
    _outputInternal: AVPlayerItemOutputInternal;
  public
    function itemTimeForHostTime (hostTimeInSeconds: CFTimeInterval): CMTime; message 'itemTimeForHostTime:';
    function itemTimeForMachAbsoluteTime (machAbsoluteTime: cint64): CMTime; message 'itemTimeForMachAbsoluteTime:';
    {$if  not defined(TARGET_OS_IPHONE)}
    function itemTimeForCVTimeStamp (timestamp_: CVTimeStamp): CMTime; message 'itemTimeForCVTimeStamp:'; { available in 10_8, NA }
    {$endif}
    procedure setSuppressesPlayerRendering(newValue: boolean); message 'setSuppressesPlayerRendering:';
    function suppressesPlayerRendering: boolean; message 'suppressesPlayerRendering';
  end;

type
  AVPlayerItemVideoOutput = objcclass external (AVPlayerItemOutput)
  private
    _videoOutputInternal: AVPlayerItemVideoOutputInternal;
  public
    function initWithPixelBufferAttributes (pixelBufferAttributes: nullable NSDictionaryPtr): instancetype; message 'initWithPixelBufferAttributes:'; { NS_DESIGNATED_INITIALIZER }
    function initWithOutputSettings (outputSettings: nullable NSDictionaryPtr): instancetype; message 'initWithOutputSettings:'; { available in 10_12, 10_0 }
    function hasNewPixelBufferForItemTime (itemTime: CMTime): boolean; message 'hasNewPixelBufferForItemTime:';
    function copyPixelBufferForItemTime_itemTimeForDisplay (itemTime: CMTime; outItemTimeForDisplay: nullable CMTimePtr): nullable CVPixelBufferRef; message 'copyPixelBufferForItemTime:itemTimeForDisplay:';
    procedure setDelegate_queue (delegate: nullable AVPlayerItemOutputPullDelegateProtocol; delegateQueue: nullable dispatch_queue_t); message 'setDelegate:queue:';
    procedure requestNotificationOfMediaDataChangeWithAdvanceInterval (interval: NSTimeInterval); message 'requestNotificationOfMediaDataChangeWithAdvanceInterval:';
    function delegate: AVPlayerItemOutputPullDelegateProtocol; message 'delegate';
    function delegateQueue: dispatch_queue_t; message 'delegateQueue';
  end;
{$endif}

{$ifdef PROTOCOLS}

type
  AVPlayerItemOutputPullDelegateProtocol = objcprotocol external name 'AVPlayerItemOutputPullDelegate' (NSObjectProtocol)
  optional
    procedure outputMediaDataWillChange (sender: AVPlayerItemOutput); message 'outputMediaDataWillChange:'; { available in 10_8, 6_0 }
    procedure outputSequenceWasFlushed (output: AVPlayerItemOutput); message 'outputSequenceWasFlushed:'; { available in 10_8, 6_0 }
  end;
{$endif}

{$ifdef CLASSES}

type
  AVPlayerItemLegibleOutput = objcclass external (AVPlayerItemOutput)
  private
    _legibleOutputInternal: AVPlayerItemLegibleOutputInternal;
  public
    procedure setDelegate_queue (delegate: nullable AVPlayerItemLegibleOutputPushDelegateProtocol; delegateQueue: nullable dispatch_queue_t); message 'setDelegate:queue:';
    function delegate: AVPlayerItemLegibleOutputPushDelegateProtocol; message 'delegate';
    function delegateQueue: dispatch_queue_t; message 'delegateQueue';
    procedure setAdvanceIntervalForDelegateInvocation(newValue: NSTimeInterval); message 'setAdvanceIntervalForDelegateInvocation:';
    function advanceIntervalForDelegateInvocation: NSTimeInterval; message 'advanceIntervalForDelegateInvocation';
  end;


type
  AVPlayerItemLegibleOutput_NativeRepresentation = objccategory external (AVPlayerItemLegibleOutput)
    function initWithMediaSubtypesForNativeRepresentation (subtypes: NSNumber *ProtocolPtr): instancetype; message 'initWithMediaSubtypesForNativeRepresentation:';
  end;

type
  AVPlayerItemLegibleOutput_TextStylingResolution = objccategory external (AVPlayerItemLegibleOutput)
    procedure setTextStylingResolution(newValue: NSString); message 'setTextStylingResolution:';
    function textStylingResolution: NSString; message 'textStylingResolution';
  end;
{$endif}

{$ifdef PROTOCOLS}

type
  AVPlayerItemLegibleOutputPushDelegateProtocol = objcprotocol external name 'AVPlayerItemLegibleOutputPushDelegate' (AVPlayerItemOutputPushDelegateProtocol)
  optional
    procedure legibleOutput_didOutputAttributedStrings_nativeSampleBuffers_forItemTime (output: AVPlayerItemLegibleOutput; strings: NSAttributedString *ProtocolPtr; nativeSamples: NSArray; itemTime: CMTime); message 'legibleOutput:didOutputAttributedStrings:nativeSampleBuffers:forItemTime:'; { available in 10_9, 7_0 }
  end;

type
  AVPlayerItemOutputPushDelegateProtocol = objcprotocol external name 'AVPlayerItemOutputPushDelegate' (NSObjectProtocol)
  optional
    procedure outputSequenceWasFlushed (output: AVPlayerItemOutput); message 'outputSequenceWasFlushed:';
  end;
{$endif}

{$ifdef CLASSES}

type
  AVPlayerItemMetadataOutput = objcclass external (AVPlayerItemOutput)
  private
    _metadataOutputInternal: AVPlayerItemMetadataOutputInternal;
  public
    function initWithIdentifiers (identifiers: nullable NSString *ProtocolPtr): instancetype; message 'initWithIdentifiers:'; { NS_DESIGNATED_INITIALIZER }
    procedure setDelegate_queue (delegate: nullable AVPlayerItemMetadataOutputPushDelegateProtocol; delegateQueue: nullable dispatch_queue_t); message 'setDelegate:queue:';
    function delegate: AVPlayerItemMetadataOutputPushDelegateProtocol; message 'delegate';
    function delegateQueue: dispatch_queue_t; message 'delegateQueue';
    procedure setAdvanceIntervalForDelegateInvocation(newValue: NSTimeInterval); message 'setAdvanceIntervalForDelegateInvocation:';
    function advanceIntervalForDelegateInvocation: NSTimeInterval; message 'advanceIntervalForDelegateInvocation';
  end;
{$endif}

{$ifdef PROTOCOLS}

type
  AVPlayerItemMetadataOutputPushDelegateProtocol = objcprotocol external name 'AVPlayerItemMetadataOutputPushDelegate' (AVPlayerItemOutputPushDelegateProtocol)
  optional
    procedure metadataOutput_didOutputTimedMetadataGroups_fromPlayerItemTrack (output: AVPlayerItemMetadataOutput; groups: AVTimedMetadataGroup *ProtocolPtr; track: AVPlayerItemTrack); message 'metadataOutput:didOutputTimedMetadataGroups:fromPlayerItemTrack:'; { available in 10_10, 8_0 }
  end;
{$endif}

